{
	"info": {
		"_postman_id": "34776802-d22f1844-6f64-4533-8912-7d0175065e1e",
		"name": "EloDrinks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Usuario",
			"item": [
				{
					"name": "Register new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário registrado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d28c3d4b-342d-4ff4-ad5c-b1f8823e9373",
								"exec": [
									"//Pegando a data de cadastro para comparação futura\r",
									"let data = new Date();\r",
									"\r",
									"//data.setHours(data.getHours() - 3); //Fuso horário\r",
									"pm.environment.set(\"dataCadastro\", data.toISOString().split('T')[0]); //Pegando só a data"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-f07d20c3-383d-46dc-9216-649e309e20af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nome\": \"Gabriel\",\r\n    \"Sobrenome\": \"Alves Fernandes\",\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Telefone\": \"(24) 99999-9999\",\r\n    \"Senha\": \"VascoDaGama123@\",\r\n    \"Tipo\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register same user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Fail)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário já existe\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d28c3d4b-342d-4ff4-ad5c-b1f8823e9373",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-43c313bd-2c8e-4eb1-bbfa-8090a130a793",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nome\": \"Gabriel\",\r\n    \"Sobrenome\": \"Alves Fernandes\",\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Telefone\": \"(24) 99999-9999\",\r\n    \"Senha\": \"VascoDaGama123@\",\r\n    \"Tipo\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7810fcc6-388a-4cbc-a913-72004df78310",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.token);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains token\", function(){\r",
									"    pm.response.to.have.jsonBody('token');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-d4b326a3-89c8-4fe5-a9aa-94ee60ea08d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Senha\": \"VascoDaGama123@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00226090-9d28-4f6e-87ec-9eee9c508379",
								"exec": [
									"let dados = pm.response.json();\r",
									"let nome = \"Gabriel\";\r",
									"let usuario = dados.find(u => u.nome === nome);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Find the user by name and return the id\", function (){\r",
									"\r",
									"    pm.expect(usuario).to.not.be.undefined;\r",
									"    pm.environment.set(\"idUsuario\", usuario.idUsuario);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct data\", function(){\r",
									"\r",
									"    let data = pm.environment.get(\"dataCadastro\");\r",
									"\r",
									"    pm.expect(usuario.idUsuario).to.contain(\"u1\")\r",
									"    pm.expect(usuario.sobrenome).to.equal(\"Alves Fernandes\")\r",
									"    pm.expect(usuario.email).to.equal(\"gfernandes@ges.inatel.br\")\r",
									"    pm.expect(usuario.telefone).to.equal(\"(24) 99999-9999\")\r",
									"    pm.expect(usuario.dataCadastro).to.eql(data)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-50e8cf16-1621-4b24-86a5-11daad72940d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Usuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "728c1a09-b526-40a4-bb73-f957a90c4bb6",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.eql(\"Usuário atualizado com sucesso.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-7a36fbb0-9701-4b10-aca2-ead9471f04e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"idUsuario\": \"Teste não funciona\",\r\n  \"nome\": \"João Pedro\",\r\n  \"sobrenome\": \"Maciel\",\r\n  \"email\": \"megacavaleiro@inatel.br\",\r\n  \"telefone\": \"(35) 98765-4321\",\r\n  \"tipo\": \"admin\",\r\n  \"dataCadastro\": \"Teste não funciona\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Usuario/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d0b8e20-94f3-42a4-8568-070dfcf13882",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains updated data\", function(){\r",
									"\r",
									"    let dados = pm.response.json();\r",
									"    pm.expect(dados.nome).to.equal(\"João Pedro\")\r",
									"    pm.expect(dados.sobrenome).to.equal(\"Maciel\")\r",
									"    pm.expect(dados.email).to.equal(\"megacavaleiro@inatel.br\")\r",
									"    pm.expect(dados.telefone).to.equal(\"(35) 98765-4321\")\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-a0317b4f-44b6-4233-a34e-7712daababc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Usuario/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a96b4979-cc98-4c59-9cbd-273022f5b71e",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-69b26ee5-d38c-490b-aecd-407fa5fb94f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Usuario/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a96b4979-cc98-4c59-9cbd-273022f5b71e",
								"exec": [
									"pm.test(\"Response status code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Fail)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário não encontrado\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"idOrcamento\")\r",
									"pm.environment.unset(\"idPedido\")\r",
									"pm.environment.unset(\"idUsuario\")\r",
									"pm.environment.unset(\"idItem\")\r",
									"pm.environment.unset(\"dataCadastro\")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "473f79ab-c558-4372-b843-227a24e49fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-3fd6b57f-ac10-480b-bc85-0ae8706fe672",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Usuario/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-d7cacb16-e10f-4f9b-bb4f-9aa90adc3239"
		},
		{
			"name": "Item",
			"item": [
				{
					"name": "Register new item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item cadastrado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-9bb15eb3-1a98-4713-81f4-04a8c91d967c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"Nome\": \"Cerveja\",\r\n        \"Descricao\": \"Cerveja Brahma 330mL\",\r\n        \"Preco\": 8.0,\r\n        \"Tipo\": \"Bebida Alcóolica\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register same item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item com nome 'Cerveja' já existe\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-8345dca7-ecca-4637-95af-c9e2efeb98cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"Nome\": \"Cerveja\",\r\n        \"Descricao\": \"Cerveja Brahma 330mL\",\r\n        \"Preco\": 8.0,\r\n        \"Tipo\": \"Bebida Alcóolica\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				},
				{
					"name": "All itens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02ea989c-8743-4a40-b998-4abe47b92a48",
								"exec": [
									"let dados = pm.response.json();\r",
									"let nome = \"Cerveja\";\r",
									"let item = dados.find(u => u.nome === nome);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Find the user by name and return the id\", function (){\r",
									"\r",
									"    pm.expect(item).to.not.be.undefined;\r",
									"    pm.environment.set(\"idItem\", item.idItem);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct data\", function(){\r",
									"\r",
									"    pm.expect(item.idItem).to.contain(\"i1\")\r",
									"    pm.expect(item.nome).to.equal(\"Cerveja\")\r",
									"    pm.expect(item.descricao).to.equal(\"Cerveja Brahma 330mL\")\r",
									"    pm.expect(item.preco).to.equal(8.0)\r",
									"    pm.expect(item.tipo).to.equal(\"Bebida Alcóolica\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-a995f2af-66b7-4de7-8fbf-b8c492f0677a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0264dae-0dd4-463e-b1b4-a499ec894397",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.eql(\"Item atualizado com sucesso.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-a9041048-70bc-4e49-8a0a-92677c6e3d22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Cosmopolitan\",\r\n  \"descricao\": \"Sei lá porra\",\r\n  \"preco\": 12.50,\r\n  \"tipo\": \"Drink Alcóolico\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idItem}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0264dae-0dd4-463e-b1b4-a499ec894397",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains updated data\", function(){\r",
									"\r",
									"    let item = pm.response.json();\r",
									"    pm.expect(item.idItem).to.contain(\"i1\")\r",
									"    pm.expect(item.nome).to.equal(\"Cosmopolitan\")\r",
									"    pm.expect(item.descricao).to.equal(\"Sei lá porra\")\r",
									"    pm.expect(item.preco).to.equal(12.50)\r",
									"    pm.expect(item.tipo).to.equal(\"Drink Alcóolico\")\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-e409bfcf-4803-4e56-ac93-fc43ba1affb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Item/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idItem}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd9ca324-9809-46c8-99b3-1fdcd252d74a",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-d242ad34-682a-42b6-ad19-af03d654144d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Item/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idItem}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing item Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd9ca324-9809-46c8-99b3-1fdcd252d74a",
								"exec": [
									"pm.test(\"Response status code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Fail)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item não encontrado\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"idOrcamento\")\r",
									"pm.environment.unset(\"idPedido\")\r",
									"pm.environment.unset(\"idUsuario\")\r",
									"pm.environment.unset(\"idItem\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-68086263-6f70-41ca-9e89-44d41d1d1fdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Item/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idItem}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-843cb674-ecb4-4271-b1c1-072b16e6f3ac"
		},
		{
			"name": "Orcamento",
			"item": [
				{
					"name": "Register new user Orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário registrado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d28c3d4b-342d-4ff4-ad5c-b1f8823e9373",
								"exec": [
									"//Pegando a data de cadastro para comparação futura\r",
									"let data = new Date();\r",
									"\r",
									"//data.setHours(data.getHours() - 3); //Fuso horário\r",
									"pm.environment.set(\"dataCadastro\", data.toISOString().split('T')[0]); //Pegando só a data"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-cdf35abe-e979-4ad9-9bbc-4b5c74bfee46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nome\": \"Gabriel\",\r\n    \"Sobrenome\": \"Alves Fernandes\",\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Telefone\": \"(24) 99999-9999\",\r\n    \"Senha\": \"VascoDaGama123@\",\r\n    \"Tipo\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new item Orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item cadastrado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-c5912999-7bde-4f50-829c-e39d55b89748",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"Nome\": \"Cerveja\",\r\n        \"Descricao\": \"Cerveja Brahma 330mL\",\r\n        \"Preco\": 8.0,\r\n        \"Tipo\": \"Bebida Alcóolica\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1ae4239-6973-42be-b462-8ff72260ed56",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let dados = pm.response.json();\r",
									"pm.environment.set(\"idOrcamento\", dados.idOrcamento);\r",
									"pm.environment.set(\"idPedido\", dados.idPedido);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-6bba2e36-577a-4b7f-a2cf-9db5a2338a77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"baseFesta\": {\r\n      \"tipoFesta\": \"Festa Teen\",\r\n      \"drinksSelecionados\": [\r\n        {\r\n          \"id\": \"i11LKQJlmumPn9lWih\",\r\n          \"nome\": \"Piña Descalada\",\r\n          \"descricao\": \"Suco de abacaxi, leite de coco, leite condensado e granulados coloridos\"\r\n        },\r\n        {\r\n          \"id\": \"i1FGlcg0VClkJIzj9B\",\r\n          \"nome\": \"Sunrise Splash\",\r\n          \"descricao\": \"Suco de laranja, xarope de grenadine e água com gás, guarnecido com uma rodela de laranja e cereja.\"\r\n        },\r\n        {\r\n          \"id\": \"i1GsP4QdH4eysBOQmJ\",\r\n          \"nome\": \"Lichai Paradise\",\r\n          \"descricao\": \"Água com gás, morangos simples, lichia, suco de limão e hortelã\"\r\n        },\r\n        {\r\n          \"id\": \"i1r2FZ2OSkPaOptUU3\",\r\n          \"nome\": \"Cirque Blue\",\r\n          \"descricao\": \"Curacao blue, suco de blueberry, amora, mix de limão, água com gás e algodão doce ou bala de fruta\"\r\n        },\r\n        {\r\n          \"id\": \"i1rz62dHMqSDa020XU\",\r\n          \"nome\": \"Classic Tonic\",\r\n          \"descricao\": \"Limão siciliano, xarope e tônica\"\r\n        },\r\n        {\r\n          \"id\": \"i1TE7rXG2YUqWMfkhY\",\r\n          \"nome\": \"Minty Green\",\r\n          \"descricao\": \"Chá verde gelado, suco de limão e xarope de hortelã, servido com folhas de hortelã fresca e uma rodela de limão.\"\r\n        },\r\n        {\r\n          \"id\": \"i1vCWQEQXxersroTVf\",\r\n          \"nome\": \"Berry Breeze\",\r\n          \"descricao\": \"Suco de cranberry e framboesa, um toque de limão e água tônica, decorado com frutas vermelhas frescas.\"\r\n        },\r\n        {\r\n          \"id\": \"i1Xy5Nn2uuMouEJXqh\",\r\n          \"nome\": \"Pink Lemonade\",\r\n          \"descricao\": \"Mix de limão, limão siciliano, goma ou gás e syrup de morango servido em tacinhas ou limonadas brilhantes\"\r\n        }\r\n      ]\r\n    },\r\n    \"infosContratante\": {\r\n      \"nome\": \"Pedro\",\r\n      \"sobrenome\": \"user\",\r\n      \"telefone\": \"231923817\",\r\n      \"email\": \"gfernandes@ges.inatel.br\",\r\n      \"data\": \"2025-06-18\",\r\n      \"endereco\": \"rua teste final 4\",\r\n      \"horarioInicio\": \"10:00\",\r\n      \"horarioFinal\": \"02:00\",\r\n      \"cep\": \"37410000\",\r\n      \"convidados\": \"100\"\r\n    },\r\n    \"opcionais\": {\r\n      \"shots\": {},\r\n      \"extras\": {},\r\n      \"baresAdicionais\": [\r\n        \"Ponche para Welcome Drink\"\r\n      ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Orcamento/front-create",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								"front-create"
							]
						}
					},
					"response": []
				},
				{
					"name": "All orcamentos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98815b35-a56e-4a33-bc95-f8967096d063",
								"exec": [
									"let dados = pm.response.json();\r",
									"let id = pm.environment.get(\"idOrcamento\");\r",
									"let orcamento = dados.find(u => u.idOrcamento === id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Find the orcamento by id and return the idUsuario\", function (){\r",
									"\r",
									"    pm.expect(orcamento).to.not.be.undefined;\r",
									"    pm.environment.set(\"idUsuario\", orcamento.idUsuario);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63256d5d-35c9-4dd7-9ceb-1eac027bb27a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-680bfb4f-506f-4154-8ae9-2521a5903508",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Orcamento",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0264dae-0dd4-463e-b1b4-a499ec894397",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.eql(\"Orçamento atualizado com sucesso.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-156f4164-0294-4250-ba74-86394aff6530",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": \"2025-06-04\",\r\n  \"cep\": \"37541111\",\r\n  \"horaInicio\": \"01:59:00\",\r\n  \"horaFim\": \"23:59:00\",\r\n  \"qtdPessoas\": 2147483647,\r\n  \"preco\": 99.99,\r\n  \"status\": \"Aprovado\",\r\n  \"tipoEvento\": \"Festa do Vitinho\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Orcamento/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d0b8e20-94f3-42a4-8568-070dfcf13882",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains updated data\", function(){\r",
									"\r",
									"    let dados = pm.response.json();\r",
									"    \r",
									"    pm.expect(dados.infosContratante.nome).to.equal(\"Gabriel\")\r",
									"    pm.expect(dados.infosContratante.sobrenome).to.equal(\"Alves Fernandes\")\r",
									"    pm.expect(dados.infosContratante.horarioInicio).to.equal(\"01:59\")\r",
									"    pm.expect(dados.infosContratante.horarioFinal).to.equal(\"23:59\")\r",
									"    pm.expect(dados.infosContratante.cep).to.equal(\"37541111\")\r",
									"    pm.expect(dados.infosContratante.convidados).to.equal(\"2147483647\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-59a3dd63-0dc5-4249-aacc-e56b3191af17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Orcamento/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idOrcamento}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e448eaf-d18c-49e8-a473-b8a3aef22d3f",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Orçamento deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-41156e8c-ae51-439a-95c3-c81dffedab56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Orcamento/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a96b4979-cc98-4c59-9cbd-273022f5b71e",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-3c472398-d067-4fec-a972-0de6d3f31704",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Usuario/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"Usuario",
								":id"
							],
							"variable": [
								{
									"id": "1e01b7d9-e807-49ef-b771-1c38146322d9",
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non existing orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e448eaf-d18c-49e8-a473-b8a3aef22d3f",
								"exec": [
									"pm.test(\"Response status code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Fail)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Orçamento não encontrado\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"idOrcamento\")\r",
									"pm.environment.unset(\"idPedido\")\r",
									"pm.environment.unset(\"idUsuario\")\r",
									"pm.environment.unset(\"idItem\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-8056f599-f153-4721-844b-14485a28bf4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Orcamento/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-a8a554df-4d3a-4a27-8c8f-62dd5674b316"
		},
		{
			"name": "Pedido",
			"item": [
				{
					"name": "Register new user Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário registrado com sucesso\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d28c3d4b-342d-4ff4-ad5c-b1f8823e9373",
								"exec": [
									"//Pegando a data de cadastro para comparação futura\r",
									"let data = new Date();\r",
									"\r",
									"//data.setHours(data.getHours() - 3); //Fuso horário\r",
									"pm.environment.set(\"dataCadastro\", data.toISOString().split('T')[0]); //Pegando só a data"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-30dd98f2-add1-433f-ab61-0e810710abb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nome\": \"Gabriel\",\r\n    \"Sobrenome\": \"Alves Fernandes\",\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Telefone\": \"(24) 99999-9999\",\r\n    \"Senha\": \"VascoDaGama123@\",\r\n    \"Tipo\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new Orcamento Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1ae4239-6973-42be-b462-8ff72260ed56",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let dados = pm.response.json();\r",
									"pm.environment.set(\"idOrcamento\", dados.idOrcamento);\r",
									"pm.environment.set(\"idPedido\", dados.idPedido);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5177f356-851f-496a-a777-08b2be65de02",
								"exec": [
									"//Pegando a data de cadastro para comparação futura\r",
									"let data = new Date();\r",
									"\r",
									"//data.setHours(data.getHours() - 3); //Fuso horário\r",
									"pm.environment.set(\"dataCadastro\", data.toISOString().split('T')[0]); //Pegando só a data"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-f547f8a0-fffa-48a7-9162-bf7354f74b19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"baseFesta\": {\r\n    \"tipoFesta\": \"Show do Claudinho e do Bochecha\",\r\n    \"drinksSelecionados\": [\r\n      {\r\n        \"id\": \"MOCK:idCerveja\",\r\n        \"nome\": \"Caipirinha\",\r\n        \"descricao\": \"Drink de cachaça com limão\"\r\n      }\r\n    ]\r\n  },\r\n  \"infosContratante\": {\r\n    \"nome\": \"Hozier\",\r\n    \"sobrenome\": \"Hozier\",\r\n    \"telefone\": \"(24) 999728186\",\r\n    \"email\": \"gfernandes@ges.inatel.br\",\r\n    \"data\": \"2025-10-25\",\r\n    \"endereco\": \"Rua Coronel Francisco Palma\",\r\n    \"horarioInicio\": \"12:00:00\",\r\n    \"horarioFinal\": \"23:00:00\",\r\n    \"cep\": \"37540000\",\r\n    \"convidados\": \"100\"\r\n  },\r\n  \"opcionais\": {\r\n    \"shots\": {\r\n      \"additionalProp1\": 0,\r\n      \"additionalProp2\": 0,\r\n      \"additionalProp3\": 0\r\n    },\r\n    \"extras\": {\r\n      \"additionalProp1\": 0,\r\n      \"additionalProp2\": 0,\r\n      \"additionalProp3\": 0\r\n    },\r\n    \"baresAdicionais\": [\r\n      \"Bar muito bom mesmo\"\r\n    ]\r\n  },\r\n  \"preco\": 30000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Orcamento/front-create",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								"front-create"
							]
						}
					},
					"response": []
				},
				{
					"name": "All pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "843af4a9-722e-45cf-a441-b573864a5c3a",
								"exec": [
									"let dados = pm.response.json();\r",
									"let id = pm.environment.get(\"idPedido\");\r",
									"let pedido = dados.find(u => u.idPedido === id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct data\", function(){\r",
									"\r",
									"    pm.expect(pedido.idPedido).to.contain(\"p1\")\r",
									"    pm.expect(pedido.status).to.equal(\"Pendente\")\r",
									"    pm.expect(pedido.dataCriacao).to.equal(pm.environment.get(\"dataCadastro\"))\r",
									"    pm.expect(pedido.orcamentoIdOrcamento).to.equal(pm.environment.get(\"idOrcamento\"))\r",
									"\r",
									"});\r",
									"\r",
									"pm.environment.set(\"idUsuario\", pedido.orcamentoUsuarioIdUsuario)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-cc891876-bc7e-4c9a-9ee0-6cedd1b1553c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Pedido",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "843af4a9-722e-45cf-a441-b573864a5c3a",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.eql(\"Pedido atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d480772-5e8c-42a8-bb9b-ecfebed650ee",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-26ef8d8e-0efa-4a8f-8f06-963576c413c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"total\": 15000.99,\r\n  \"status\": \"Aprovado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Pedido/:idPedido/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido",
								":idPedido",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idPedido",
									"value": "{{idPedido}}"
								},
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "843af4a9-722e-45cf-a441-b573864a5c3a",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct data\", function(){\r",
									"\r",
									"    let pedido = pm.response.json();\r",
									"\r",
									"    pm.expect(pedido.idPedido).to.contain(\"p1\")\r",
									"    pm.expect(pedido.status).to.equal(\"Aprovado\")\r",
									"    pm.expect(pedido.dataCriacao).to.equal(pm.environment.get(\"dataCadastro\"))\r",
									"    pm.expect(pedido.orcamentoIdOrcamento).to.equal(pm.environment.get(\"idOrcamento\"))\r",
									"    pm.expect(pedido.total).to.equal(15001)\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-161cb70e-caea-4d68-82b5-8b1b8fe47cec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Pedido/:idPedido",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido",
								":idPedido"
							],
							"variable": [
								{
									"key": "idPedido",
									"value": "{{idPedido}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific pedido Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "843af4a9-722e-45cf-a441-b573864a5c3a",
								"exec": [
									"let dados = pm.response.json();\r",
									"let id = pm.environment.get(\"idPedido\");\r",
									"let pedido = dados.find(u => u.idPedido === id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct data\", function(){\r",
									"\r",
									"    let idUsuario = pm.environment.get(\"idUsuario\")\r",
									"\r",
									"    pm.expect(pedido.orcamentoUsuarioIdUsuario).to.equal(idUsuario)\r",
									"    pm.expect(pedido.idPedido).to.contain(\"p1\")\r",
									"    pm.expect(pedido.status).to.equal(\"Aprovado\")\r",
									"    pm.expect(pedido.total).to.equal(15001)\r",
									"    pm.expect(pedido.dataCriacao).to.equal(pm.environment.get(\"dataCadastro\"))\r",
									"    pm.expect(pedido.orcamentoIdOrcamento).to.equal(pm.environment.get(\"idOrcamento\"))\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-6e843fe9-6522-42a5-b36e-bb014a626746",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Pedido/usuario/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido",
								"usuario",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d4bf08-6a6c-4806-9ce3-22791823fd28",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Pedido deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-ce7d9a48-7104-4019-bc15-40cec074fe0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Pedido/:idPedido/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido",
								":idPedido",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idPedido",
									"value": "{{idPedido}}"
								},
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e448eaf-d18c-49e8-a473-b8a3aef22d3f",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Orçamento deletado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-043e97a8-3d63-4b7e-b6af-947097fc748d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Orcamento/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Orcamento",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non existing pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d4bf08-6a6c-4806-9ce3-22791823fd28",
								"exec": [
									"pm.test(\"Response status code is 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Success)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Pedido não encontrado\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"idOrcamento\")\r",
									"pm.environment.unset(\"idPedido\")\r",
									"pm.environment.unset(\"idUsuario\")\r",
									"pm.environment.unset(\"idItem\")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-f5e23a7b-0643-41b9-8d49-9e09c9959c4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/Pedido/:idPedido/:idOrcamento/:idUsuario",
							"host": [
								"{{url}}"
							],
							"path": [
								"Pedido",
								":idPedido",
								":idOrcamento",
								":idUsuario"
							],
							"variable": [
								{
									"key": "idPedido",
									"value": "{{idPedido}}"
								},
								{
									"key": "idOrcamento",
									"value": "{{idOrcamento}}"
								},
								{
									"key": "idUsuario",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-461c53fa-25f9-40b3-a51a-36f553954829"
		},
		{
			"name": "OrcamentoHasItem",
			"item": [
				{
					"name": "Register new user Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Usuário registrado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d28c3d4b-342d-4ff4-ad5c-b1f8823e9373",
								"exec": [
									"//Pegando a data de cadastro para comparação futura\r",
									"let data = new Date();\r",
									"\r",
									"//data.setHours(data.getHours() - 3); //Fuso horário\r",
									"pm.environment.set(\"dataCadastro\", data.toISOString().split('T')[0]); //Pegando só a data"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-f93be59e-03f9-4ef2-a744-d174b364b388",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nome\": \"Gabriel\",\r\n    \"Sobrenome\": \"Alves Fernandes\",\r\n    \"Email\": \"gfernandes@ges.inatel.br\",\r\n    \"Telefone\": \"(24) 99999-9999\",\r\n    \"Senha\": \"VascoDaGama123@\",\r\n    \"Tipo\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new item Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20aa61bb-0c17-430b-8fcc-fa331b10af42",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct (Sucess)\", function(){\r",
									"    let resposta = pm.response.text();\r",
									"    pm.expect(resposta).to.contain(\"Item cadastrado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-0c32a9cc-310f-474a-9bba-150d68560347",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n    \"idItem\": \"i102e4jtFekcSrv9dR\",\r\n    \"nome\": \"Mini milk-shakes de Oreo\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 20,\r\n    \"tipo\": \"Shot\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				},
				{
					"name": "Linkar item e orcamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1ae4239-6973-42be-b462-8ff72260ed56",
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let dados = pm.response.json();\r",
									"pm.environment.set(\"idOrcamento\", dados.idOrcamento);\r",
									"pm.environment.set(\"idPedido\", dados.idPedido);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-8912c183-69cb-4ef8-b82e-2f8c8c5b8142",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"baseFesta\": {\r\n    \"tipoFesta\": \"Show do Claudinho e do Bochecha\",\r\n    \"drinksSelecionados\": [\r\n      {\r\n        \"id\": \"MOCK:idCerveja\",\r\n        \"nome\": \"Caipirinha\",\r\n        \"descricao\": \"Drink de cachaça com limão\"\r\n      }\r\n    ]\r\n  },\r\n  \"infosContratante\": {\r\n    \"nome\": \"Hozier\",\r\n    \"sobrenome\": \"Hozier\",\r\n    \"telefone\": \"(24) 999728186\",\r\n    \"email\": \"gfernandes@ges.inatel.br\",\r\n    \"data\": \"2025-10-25\",\r\n    \"endereco\": \"Rua Coronel Francisco Palma\",\r\n    \"horarioInicio\": \"12:00:00\",\r\n    \"horarioFinal\": \"23:00:00\",\r\n    \"cep\": \"37540000\",\r\n    \"convidados\": \"100\"\r\n  },\r\n  \"opcionais\": {\r\n    \"shots\": {\r\n      \"additionalProp1\": 0,\r\n      \"additionalProp2\": 0,\r\n      \"additionalProp3\": 0\r\n    },\r\n    \"extras\": {\r\n      \"additionalProp1\": 0,\r\n      \"additionalProp2\": 0,\r\n      \"additionalProp3\": 0\r\n    },\r\n    \"baresAdicionais\": [\r\n      \"Bar muito bom mesmo\"\r\n    ]\r\n  },\r\n  \"preco\": 30000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/OrcamentoHasItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"OrcamentoHasItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "All links",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98815b35-a56e-4a33-bc95-f8967096d063",
								"exec": [
									"let dados = pm.response.json();\r",
									"let id = pm.environment.get(\"idOrcamento\");\r",
									"let orcamento = dados.find(u => u.idOrcamento === id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Find the orcamento by id and return the idUsuario\", function (){\r",
									"\r",
									"    pm.expect(orcamento).to.not.be.undefined;\r",
									"    pm.environment.set(\"idUsuario\", orcamento.idUsuario);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63256d5d-35c9-4dd7-9ceb-1eac027bb27a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "34776802-e52975b2-76ec-4392-ba7f-c966377e0f08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/OrcamentoHasItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"OrcamentoHasItem"
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-fbb1557c-ebfe-4dfe-b607-a032b9f49279"
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "Itens Json",
					"id": "34776802-6d800831-53ee-417b-a947-a929bbd09a0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"idItem\": \"i102e4jtFekcSrv9dR\",\r\n    \"nome\": \"Mini milk-shakes de Oreo\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 20,\r\n    \"tipo\": \"Shot\"\r\n  },\r\n  {\r\n    \"idItem\": \"i11LKQJlmumPn9lWih\",\r\n    \"nome\": \"Piña Descalada\",\r\n    \"descricao\": \"Suco de abacaxi, leite de coco, leite condensado e granulados coloridos\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i12jepNzmTNiX2ZqKX\",\r\n    \"nome\": \"Whisky Black Label\",\r\n    \"descricao\": \"Whisky Black Label\",\r\n    \"preco\": 160,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i12PlUD9t9CLhfIiAO\",\r\n    \"nome\": \"Paradise\",\r\n    \"descricao\": \" Vodka, água de coco, syrup de baunilha e raspas de coco desidratado\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i13UBIY5xDOOXC7p36\",\r\n    \"nome\": \"Drink na Lâmpada\",\r\n    \"descricao\": \"Drink na Lâmpada\",\r\n    \"preco\": 8,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i13XufAfUwKTEQrCMB\",\r\n    \"nome\": \"Whisky Johnnie Walker Red Label\",\r\n    \"descricao\": \"Whisky Johnnie Walker Red Label\",\r\n    \"preco\": 100,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i159HOe6pk0VQjmbp1\",\r\n    \"nome\": \"Tequila de café em copinhos de chocolate\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 16,\r\n    \"tipo\": \"Shot\"\r\n  },\r\n  {\r\n    \"idItem\": \"i160VCLtD6W5bszrgu\",\r\n    \"nome\": \"Fitzgerald\",\r\n    \"descricao\": \"Gin, syrup de açúcar, suco de limão siciliano, angostura bitters e zest\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i179fSVduKdLX4LscD\",\r\n    \"nome\": \"Margarita\",\r\n    \"descricao\": \"Tequila, Cointreau, suco de limão taiti e borda de sal\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i17R3SuHESlsNccJ97\",\r\n    \"nome\": \"Tropical Dream\",\r\n    \"descricao\": \"Purê de manga, suco de abacaxi e um toque de leite de coco, batido com gelo e finalizado com uma fatia de carambola.\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i186d0cVyYeCiEp9nA\",\r\n    \"nome\": \"Ponche para Welcome Drink\",\r\n    \"descricao\": \"    Lillet, hortelã, laranja bahia e tônica com gelo especial (Bloco grande de gelo com Orquídea)\",\r\n    \"preco\": 3500,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i18bCgMHD4tVg8kq7W\",\r\n    \"nome\": \"Espumante Freixenet Brut\",\r\n    \"descricao\": \"Espumante Freixenet Brut\",\r\n    \"preco\": 75,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i18KlorWQpANGwgWRx\",\r\n    \"nome\": \"Mini Beer (Licor 43) com espuma:\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 12,\r\n    \"tipo\": \"Shot\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1b5RAkHoqqYi5fyF0\",\r\n    \"nome\": \"Bar de Gin Tônica + Box de Especiarias\",\r\n    \"descricao\": \"    TORANJA TONIC – Gin, xarope de grapefruit, tangerina, pimenta rosa e tônica\\n    CLASSIC TONIC – Gin, limão siciliano, zimbro e tônica\",\r\n    \"preco\": 1400,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1cXa725zAv9IHx78s\",\r\n    \"nome\": \"Cucumber Fizz\",\r\n    \"descricao\": \"Gin, pepino, suco de limão siciliano, syrup de hortelã e água tônica\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1DyosmH7DwndhoFIW\",\r\n    \"nome\": \"Bar Rústico\",\r\n    \"descricao\": \"    Caipirinha flambada com cachaça envelhecida\\n    Drink de catuaba com frutas vermelhas e espuma de maracujá\\n    Moscow Mule na caneca de cobre com espuma de gengibre\",\r\n    \"preco\": 1600,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1FGlcg0VClkJIzj9B\",\r\n    \"nome\": \"Sunrise Splash\",\r\n    \"descricao\": \"Suco de laranja, xarope de grenadine e água com gás, guarnecido com uma rodela de laranja e cereja.\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1FkSAQAdrWTmLZLvp\",\r\n    \"nome\": \"Jagermeister em tubos de ensaio\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 10,\r\n    \"tipo\": \"Shot\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1fwXsgtqzxFKubfQ2\",\r\n    \"nome\": \"Cerveja\",\r\n    \"descricao\": \"Cerveja Brahma 330mL\",\r\n    \"preco\": 8,\r\n    \"tipo\": \"Bebida Alcóolica\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1g6y8eLob9QGZJjE1\",\r\n    \"nome\": \"Daiquiri Clássico\",\r\n    \"descricao\": \"Rum branco, suco de limão taiti e xarope de açúcar\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1GsP4QdH4eysBOQmJ\",\r\n    \"nome\": \"Lichai Paradise\",\r\n    \"descricao\": \"Água com gás, morangos simples, lichia, suco de limão e hortelã\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1Gu66UxwLVetL5MIe\",\r\n    \"nome\": \"Bar Whiskeria – Harmonizações\",\r\n    \"descricao\": \"    Gelos em cubos com folha de ouro, Gelos em Esferas, Zest de casca de limão siciliano e Zest de casca de laranja e defumação.\",\r\n    \"preco\": 3500,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1H6dhQYql8jcb6nNf\",\r\n    \"nome\": \"Negroni Twist\",\r\n    \"descricao\": \"Gin, vermute rosso, Campari e zest de laranja bahia\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1IbHK1WRxMHW0dJvv\",\r\n    \"nome\": \"Bar de Café & Expresso Drinks\",\r\n    \"descricao\": \"    Espresso Martini\\n    Irish Coffee\\n    Cold Brew Tônica\",\r\n    \"preco\": 1300,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1IzSyaIL8iVNNqoWp\",\r\n    \"nome\": \"Cerveja Stella Artois\",\r\n    \"descricao\": \"cerveja\",\r\n    \"preco\": 9,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1m0xFyJn4dQs9MQI6\",\r\n    \"nome\": \"Ginger Zest\",\r\n    \"descricao\": \"Limonada fresca com um toque de xarope de gengibre e um dash de água com gás, decorado com uma fatia fina de gengibre.\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1mgi2XUJrJnPgncy3\",\r\n    \"nome\": \"Penicilin\",\r\n    \"descricao\": \"Whisky, suco de limão siciliano, xarope de gengibre e scotch defumado\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1O1MrvQQzXMYzG1vN\",\r\n    \"nome\": \"Busca Vida artesanal em mini garrafas\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 10,\r\n    \"tipo\": \"Shot\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1OMQI4VbYTzKhgk72\",\r\n    \"nome\": \"Aperol Spritz\",\r\n    \"descricao\": \"Aperol, espumante, água com gás e laranja\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1oqVEF45n5GtvNi7H\",\r\n    \"nome\": \"Moscow Mule\",\r\n    \"descricao\": \"Vodka, xarope de gengibre, limão taiti e espuma de gengibre\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1PTAuIHUo438hUHvc\",\r\n    \"nome\": \"Spicy Passion\",\r\n    \"descricao\": \"Vodka, maracujá, syrup de pimenta dedo-de-moça e limão taiti\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1q7HqwjiekCuR5vH1\",\r\n    \"nome\": \"Bar de Caipirinhas – Vodka, Saquê e Cachaça\",\r\n    \"descricao\": \"    Abacaxi com hortelã, Uva com manjericão, Kiwi com limão\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Bar\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1r2FZ2OSkPaOptUU3\",\r\n    \"nome\": \"Cirque Blue\",\r\n    \"descricao\": \"Curacao blue, suco de blueberry, amora, mix de limão, água com gás e algodão doce ou bala de fruta\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1rz62dHMqSDa020XU\",\r\n    \"nome\": \"Classic Tonic\",\r\n    \"descricao\": \"Limão siciliano, xarope e tônica\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1sRvOSmpU9BauhJ0c\",\r\n    \"nome\": \"Espumante Salton Brut\",\r\n    \"descricao\": \"Espumante Salton Brut\",\r\n    \"preco\": 40,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1TE7rXG2YUqWMfkhY\",\r\n    \"nome\": \"Minty Green\",\r\n    \"descricao\": \"Chá verde gelado, suco de limão e xarope de hortelã, servido com folhas de hortelã fresca e uma rodela de limão.\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1uZepl4zoJIV2zcne\",\r\n    \"nome\": \"Basil Smash\",\r\n    \"descricao\": \"Gin, suco de limão siciliano, syrup de manjericão e folhas de manjericão\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1vCWQEQXxersroTVf\",\r\n    \"nome\": \"Berry Breeze\",\r\n    \"descricao\": \"Suco de cranberry e framboesa, um toque de limão e água tônica, decorado com frutas vermelhas frescas.\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1W5W21i4pUZJMZX5V\",\r\n    \"nome\": \"Cerveja Stella Artois ou Heineken 250 ml\",\r\n    \"descricao\": \"teste\",\r\n    \"preco\": 9,\r\n    \"tipo\": \"Opcional\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1Xy5Nn2uuMouEJXqh\",\r\n    \"nome\": \"Pink Lemonade\",\r\n    \"descricao\": \"Mix de limão, limão siciliano, goma ou gás e syrup de morango servido em tacinhas ou limonadas brilhantes\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Soft Drink\"\r\n  },\r\n  {\r\n    \"idItem\": \"i1yAp0eCcDLNPgEv2t\",\r\n    \"nome\": \"Classic Tonic\",\r\n    \"descricao\": \"Gin, limão siciliano e tônica\",\r\n    \"preco\": 15,\r\n    \"tipo\": \"Drink Alcoólico\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Item",
							"host": [
								"{{url}}"
							],
							"path": [
								"Item"
							]
						}
					},
					"response": []
				}
			],
			"id": "34776802-7b139291-59dd-43e7-8122-6b89b9832bf0"
		}
	]
}